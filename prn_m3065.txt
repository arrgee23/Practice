
#! /usr/bin/env python

import os
import getopt, sys, platform
import shutil
import csv
import commands

os.chmod("BuildDir.txt",0744)
os.chmod("System.map",0744)
os.chmod("global_incs_linux.txt",0744)

os.system('pwd > BuildDir.txt')
plf = platform.system()

make_cmd_s = "b.bat"
build_threads_default = 2
disable_cache_default = 1

#print plf

if (plf=='Windows'):
    print "Build environment: Windows"
elif (plf=='SunOS'):
    print "Build environment: SunOS"
    # our build servers have only one CPU, there is no benefit from several compile threads
    build_threads_default = 1
#    disable_cache_default = 0
    make_cmd_s = "b_unix"
elif (plf=='Linux'):
    print "Build environment: Linux"
    # our build servers have only one CPU, there is no benefit from several compile threads
    build_threads_default = 8
#    disable_cache_default = 0
    make_cmd_s = "b_unix"
else:
    print "Can't determine OS type. Defaulting to Windows"


# list of mandatory build targets
build_targets = ['all','all_auto', 'plf', 'ssrt','srt','link']
#build_targets = ['all','all_auto', 'plf','con','fax','imt','jm','msc','phn','prn','rip','rpt','scn','ssrt','srt','ui', 'link', 'tst', 'aaa']
# mandatory subsytem lists
ss_list = ['ssrt']
# ss code -> ss folder dictionary
ss_dict = {"ssrt":"SubsystemRoot"}

# added user select build targets and subsystems
reader = csv.reader(open("subsystems.txt", "rb"))
for row in reader:
    if row[0]!="#" and row[0]!="##":
        build_targets.append(row[0])
        ss_list.append(row[0])
        ss_dict[row[0]] = row[1]

#remove_files = ['comp.err', 'error', 'Restruct_psos.elf', 'Restruct_psos.bin', 'link.err', 'link_scons.opt']
remove_files = ['error', 'thxImg.bin', 'link.err', 'link_scons.opt']

def remove_old_libs():
    shutil.rmtree('Libs')

def remove_error_logs():
    for name in remove_files:
        if os.path.exists(name):
            os.remove(name)

    for ss in build_targets:
        name = '_'+'error_'+ss+'.txt'
        if os.path.exists(name):
            os.remove(name)
    print "Removed kernel files and error logs"

def build_one_target(command, i_build):
# command here is scons build command to be executed (all params and args are set)
#    print i_build
    if i_build==1:
        cmd="XGConsole /command=\""+command+"\" /profile=\"profile.xml\" /openmonitor"
        print cmd
    else:
        cmd = command
    ret = os.system(cmd)
    return ret

def gen_header(ss_name, text):
    lines=[]
    lines.append('################-- '+ss_name+'SS -- START LOG ########################\n')
    if len(text) != 0:
        for line in text:
            lines.append(line)
    lines.append('################-- '+ss_name+'SS -- END LOG  #########################\n\n')
#    print lines
    return lines

def merge_logs(out_file_name):
    ff = open(out_file_name, 'w')
    for ss in build_targets:
        name = '_'+'error_'+ss+'.txt'
        if os.path.exists(name):
            err_f = open(name, 'r')
            error_text = err_f.readlines()
            err_f.close()
            lines = gen_header(ss, error_text)
#            print lines
            ff.writelines(lines)
            os.remove(name)

    ff.close()


def get_hal_model_from_file(res_path, file_name):
    str=''
    file_name = os.path.normpath(res_path+file_name)
    if os.path.exists(file_name):
        f = open(file_name, 'r')
        lines = f.readlines()
        print lines
    else:
        print res_path
        print 'NOT FOUND - ' + file_name
    return lines


def clean_build_ss(project_root, ss_code):
    name =''
    hal_model = get_hal_model_from_file('./','hal_model.txt')[0]
    if ss_dict.has_key(ss_code):
        name = ss_dict[ss_code]
    else:
        path = project_root + 'Subsystem/'+name+'/Build/'+hal_model+'/objs'
        path = os.path.abspath(path)
        print "NOT FOUND " + path

    if len(name)>0:
        #delete SS objects
        path = project_root + 'Subsystem/'+name+'/Build/'+hal_model+'/objs'
        path = os.path.abspath(path)
        if os.path.exists(path):
            shutil.rmtree(path)
            print 'REMOVED '+ path
        # delete library file
        path = 'Libs/'+name
        path = os.path.abspath(path)
#        print path
        if os.path.exists(path):
            shutil.rmtree(path)
            print 'REMOVED '+ path

def clean_build_root(project_root, ss_code):
    name = ''
    hal_model = get_hal_model_from_file('./','hal_model.txt')[0]
    if ss_code == 'plf':
        name='Platform'
    elif ss_code == 'srt':
        name='SystemRoot'
    path = project_root+name+'/Build/'+hal_model+'/objs'
    path = os.path.abspath(path)

    if os.path.exists(path):
        shutil.rmtree(path)
        print 'REMOVED '+ path
    else:
        print "NOT FOUND " + path

def do_fast_clean(target):
    project_root='./../../../../'
    root_list = ['plf','srt',]
    if target in ['all','all_auto']:
        for ss in ss_list:
            clean_build_ss(project_root, ss)
        for ss in root_list:
            clean_build_root(project_root, ss)

        if (plf=='Windows'):
            os.system('txclean.bat')
        else:
                                os.system('txclean')
    elif target in ss_list:
        clean_build_ss(project_root, target)
    elif target in root_list:
        clean_build_root(project_root, target)

def check_warning_message(ignore_warnings):
    ret = 0
    if ignore_warnings == 1:
        return 0
    else:
        if os.path.exists('comp.err'):
            if os.path.getsize('comp.err') > 0:
                ret = 1
                print "There are warning messages. Compile aborted."
    return ret

def usage():
    print "-------------------------------------------------------------------------------"
    print "GV3 System build script - script for build GV3 firmware (objects, SS libraries, RAM image)"
    print ""
    print "Usage : bscons [BUILD_TARGET] [OPTIONS]"
    print ""
    print "BUILD TARGETS:"
    print "  all  : make all subsystems and RAM image"
    print "  plf  : make Platform Library"
    print "  ssrt : make SubsystemRoot Library"
    print "  srt  : make SystemRoot Library    "
    if (build_targets.count('con')>0): print "  con  : make ConSS Library"
    if (build_targets.count('fax')>0): print "  fax  : make FaxSS Library"
    if (build_targets.count('imt')>0): print "  imt  : make ImTSS Library"
    if (build_targets.count('jm')>0): print "  jm   : make JMSS Library    "
    if (build_targets.count('msc')>0): print "  msc  : make MscSS Library"
    if (build_targets.count('phn')>0): print "  phn  : make PhnSS Library"
    if (build_targets.count('prn')>0): print "  prn  : make PrnSS Library"
    if (build_targets.count('rip')>0): print "  rip  : make RipSS Library"
    if (build_targets.count('rpt')>0): print "  rpt  : make RptSS Library"
    if (build_targets.count('scn')>0): print "  scn  : make ScnSS Library"
    if (build_targets.count('ui')>0): print "  ui   : make UISS Library"
    if (build_targets.count('tst')>0): print "  tst  : make TestSS Library"
    if (build_targets.count('aaa')>0): print "  aaa  : make AAASS Library"
    if (build_targets.count('up')>0): print "  up  : make UPSS Library"
    if (build_targets.count('log')>0): print "  log  : make LogSS Library"
    print "  link : link all libraries into BIN image"
    print "  help : show this text"
    print ""
    print "OPTIONS:"
    print "  -h, --help        : show help and usage information"
    print "  -k, --keep-going    : do not stop when compile error occurs"
    print "  -c, --clean        : remove specified build targets(very reliable, might be slow sometimes)"
    print "  -r, --remove-fast    : remove specified build targets(less reliable, but very fast)"
    print "  -l, --log-console    : print error message on standard output"
    print "  -i, --i-build        : use Xoreax Incredibuild for distributing build "
    print "  -a, --auto-link    : perform link after subsystem compile "
    print "  -d, --disable-cache    : do not use shared cache for object files"
    print "  -w, --ignore-warning:    : do not stop compile on warning message "
    print "  -s, --release        : make release binary with stripped binaries and no unit test code "
    print "  --component=Name    : compile only Name component. Usefull for clearing warning messages"
    print "  --no-warnings        : supress compiler warnings messages"
    print ""
    print "Examples:"
    print "     1. build firmware RAM image from clean source"
    print "        > bscons.py all"
    print "     2. build firmware RAM image from clean source using Incredibuild"
    print "        > bscons.py all -i"
    print "     3. clean all object and library files(using build tree, scons native)"
    print "        > bscons.py all -c"
    print "     4. clean all object and library files(fast clean, python FS API)"
    print "        > bscons.py all -r"
    print "     5. build objects and library for one subsystem"
    print "        > bscons.py [SUBSYSTEM_NAME]"
    print "     6. build objects and library for one subsystem using Incredibuild"
    print "        > bcsons.py [SUBSYSTEM_NAME] -i"
    print "     7. clean all object and library files for one subsystem"
    print "        > bscons.py [SUBSYSTEM_NAME] -c"
    print "     8. clean all object and library files for one subsystem (fast clean)"
    print "        > bscons.py [SUBSYSTEM_NAME] -r"
    print "     9. link all subsystem libraries into BIN image"
    print "        > bscons.py link"
    print "-------------------------------------------------------------------------------"
    print "Supported build targets:"
    print build_targets


def main( build_target, argv):
    show_help = 0
    make_link = 0
    make_build = 0
    build_type = ''
    clean_opt = ''
    keep_going = ""
    i_build=0
    ret = 0
    log_console = 0
    fast_clean_opt = 0
    build_threads = build_threads_default
    auto_link = 0
    disable_cache = disable_cache_default
    suppress_warnings = 1
    build_component = 0
    component_name = ""
    ignore_warnings = 0
    release_build = 0

    try:
        opts, args = getopt.getopt(argv, "hkcrliadws", ["help", "keep-going", "clean", "remove-fast", "log-console","i-build","auto-link","disable-cache", "no-warnings", "component=", "ignore-warning", "release"])
    except getopt.GetoptError:
        print "Error parsing input"
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-k", "--keep-going"):
            keep_going = " -k "
            print "KEEP GOING OPTION is ENABLED"
        elif opt in ("-c", "--clean"):
            print "CLEAN OPTION is enabled"
            clean_opt = " -c "
        elif opt in ("-r", "--remove-fast"):
            print "FAST REMOVE OPTION is ENABLED"
            fast_clean_opt = 1
        elif opt in ("-i", "--i-build"):
            if (plf=='Windows'):
                print "INCREDIBUILD OPTION is ENABLED"
                i_build = 1
                build_threads = 50
            else:
                print "INCREDIBUILD IS NOT AVAILABLE FOR THIS PLATFORM"
        elif opt in ("-l", "--log-console"):
            print "Console logging is enabled"
            log_console = 1
        elif opt in ("-a", "--auto-link"):
            print "Auto-link after build is ENABLED"
            auto_link = 1
        elif opt in ("-d", "--disable-cache"):
            disable_cache = 1
        elif opt in ("-w", "--ignore-warning"):
            print "Compiler warnings are IGNORED"
            ignore_warnings = 1
        elif opt in ("--no-warnings"):
            print "Compiler warnings are DISABLED"
            suppress_warnings = 1
        elif opt in ("-s", "--release"):
            print "building in RELEASE mode"
            release_build = 1
        elif opt in ("--component"):
            build_threads = 1
            build_component = 1
            component_name = arg

    if build_component==1 and suppress_warnings==1:
        print "--no-warnings and --component options can't be used together"
        usage()
        sys.exit(2)

    scons_opt = '-j '+str(build_threads)+' -Q '
    if build_target=='' or build_target not in build_targets:
        usage()
        sys.exit(2)
    elif build_target == 'link':
        make_link = 1

    if suppress_warnings==1:
        remove_files.append("comp.err")


    if (disable_cache == 0):
        print "Shared object cache is ENABLED"
    else:
        print "Shared object cache is DISABLED"
        scons_opt = scons_opt + ' --no-cache '

    build_type = build_target
    if build_component==1: # clean old object files if build is single component build
        do_fast_clean(build_type)

    remove_error_logs()
    if (fast_clean_opt == 1):
        do_fast_clean(build_type)
    elif (make_link==1):
#        print make_cmd_s
        make_cmd_s = 'scons '+ scons_opt + "build=os"
        ret = os.system(make_cmd_s)

    elif (show_help==1):
        ret = 0
    else:
        if (build_threads == 1):
            print "Building (using "+ str(build_threads)+" build thread)..."
        else:
            print "Building (using "+ str(build_threads)+" build threads)..."
#        if (build_type=='all' or build_type=='all_auto'):
#            remove_old_libs();

        if (build_type=='all'):
            for ss in build_targets:
                if ss != 'all' and ss != 'all_auto' and ss !='link':
                    error_file_name = '_error_'+ss+'.txt'
                    scons_command = 'scons '+ scons_opt + "build=" +ss + clean_opt + keep_going
                    if suppress_warnings == 1:
                        scons_command = scons_command + ' no_warn=1'
                    if release_build == 1:
                        scons_command = scons_command + ' release_build=1'
                    if log_console==0:
                        scons_command = scons_command + ' 2>' + error_file_name
                    ret_local = build_one_target(scons_command, i_build)
                    if (ret_local!=0):
                        ret = ret_local
            merge_logs('comp.err')
        else:
            error_file_name='comp.err'
            scons_command = 'scons '+ scons_opt + "build=" +build_type + clean_opt + keep_going
            if suppress_warnings == 1:
                scons_command = scons_command + ' no_warn=1'
            if release_build == 1:
                scons_command = scons_command + ' release_build=1'
            if build_component == 1:
                scons_command = scons_command + ' one_component='+component_name
            if log_console==0:
                scons_command = scons_command + ' 2>' + error_file_name

#            print scons_command
            ret = build_one_target(scons_command, i_build)
            if ret!=0:
                ret = check_warning_message(ignore_warnings)
        #print 'ret:',ret,',clean_opt:',clean_opt,',auto_link:',auto_link
        if (ret!=0 and clean_opt ==''):
            print('########################################################################')
            if (plf=='Windows'):
                print('Compile error! Run "type comp.err" for details. Link was not performed');
            else:
                print('Compile error! Run "cat ./comp.err" for details. Link was not performed');
            print('########################################################################')
        else:
            # link libs
            if ((clean_opt=='' and (build_type == 'all' or build_type == 'all_auto')) or auto_link == 1):
                    make_cmd_s = 'scons '+ scons_opt + "build=os"
                    ret = os.system(make_cmd_s)
    sys.exit(ret)
    #path = sys.argv[1]

if __name__ == "__main__":
    if (len(sys.argv)==1):
        print "Error: Mandatory argement is missing. Please refer to usage information"
        usage()
    else:
        main(sys.argv[1], sys.argv[2:])
